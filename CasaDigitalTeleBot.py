from telegram import (
    Update, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardMarkup, KeyboardButton, ReplyKeyboardRemove
)
from telegram.ext import (
    ApplicationBuilder, CommandHandler, CallbackQueryHandler,
    MessageHandler, ContextTypes, ConversationHandler, filters
)
from flask import Flask, request
import threading

from dotenv import load_dotenv
import os

load_dotenv()

TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MANAGER_CHAT_ID = int(os.getenv("MANAGER_CHAT_ID"))

PROMO, GET_NAME, GET_CONTACT, SELECT_SERVICE, CUSTOM_SERVICE = range(5)

flask_app = Flask(__name__)

@flask_app.route("/webhook", methods=["POST"])
def webhook():
    data = request.json
    if not data:
        return {"status": "no data"}, 400

    name = data.get("name")
    contact = data.get("contact")
    service = data.get("service")
    message = data.get("message")

    telegram_text = (
        f"üåê –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ —Å —Å–∞–π—Ç–∞:\n\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n"
        f"üì¶ –£—Å–ª—É–≥–∞: {service}\n"
        f"üìù –û –ø—Ä–æ–µ–∫—Ç–µ: {message}"
    )

    import requests
    requests.get(f"https://api.telegram.org/bot{TOKEN}/sendMessage", params={
        "chat_id": MANAGER_CHAT_ID,
        "text": telegram_text
    })

    return {"status": "ok"}, 200

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    welcome_text = (
        "üî• –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Casa Digital ‚Äî –∞–≥–µ–Ω—Ç—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ –ø–æ–º–æ–≥–∞–µ—Ç –±–∏–∑–Ω–µ—Å—É —Ä–∞—Å—Ç–∏ –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è!\n\n"
        "üìà –ú—ã —Å–æ–∑–¥–∞—ë–º –Ω–µ –ø—Ä–æ—Å—Ç–æ —Å–∞–π—Ç—ã ‚Äî –º—ã —Å—Ç—Ä–æ–∏–º –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:\n\n"
        "üîπ –†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–æ–≤\n"
        "üîπ –ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞\n"
        "üîπ –ë—Ä–µ–Ω–¥–∏–Ω–≥\n"
        "üîπ Digital-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ, —Å —á–µ–≥–æ –Ω–∞—á–Ω—ë–º üëá"
    )
    keyboard = [
        [InlineKeyboardButton("üéÅ –í–≤–µ—Å—Ç–∏ –ø—Ä–æ–º–æ–∫–æ–¥", callback_data="promo")],
        [InlineKeyboardButton("üí¨ –ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è", callback_data="consult")],
        [InlineKeyboardButton("üì¶ –í—ã–±–æ—Ä —É—Å–ª—É–≥–∏", callback_data="services")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_html(welcome_text, reply_markup=reply_markup)

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user = query.from_user

    if query.data == "promo":
        await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:")
        return PROMO

    elif query.data == "consult":
        has_discount = context.user_data.get("has_discount", False)
        await query.message.reply_text(
            "üí° –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–µ—Å–ø–ª–∞—Ç–Ω—É—é –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä —Å–∫–æ—Ä–æ —Å–≤—è–∂–µ—Ç—Å—è —Å –≤–∞–º–∏."
        )
        await context.bot.send_message(
            chat_id=MANAGER_CHAT_ID,
            text=(
                f"üö® –ù–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—é!\n"
                f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–ë–µ–∑ username'} (ID: {user.id})\n"
                f"–°–∫–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {'–î–∞' if has_discount else '–ù–µ—Ç'}"
            )
        )
        return ConversationHandler.END

    elif query.data == "services":
        await show_services(update, context)
        return ConversationHandler.END

    elif query.data == "apply":
        await query.message.reply_text("–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
        return GET_NAME

async def show_services(update: Update, context: ContextTypes.DEFAULT_TYPE):
    services_text = (
        "üì¶ <b>–ù–∞—à–∏ —É—Å–ª—É–≥–∏:</b>\n\n"
        "üñ•Ô∏è <b>–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–æ–≤</b>\n"
        "–°–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ, –±—ã—Å—Ç—Ä—ã–µ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é—â–∏–µ –≤–µ–±-—Å–∞–π—Ç—ã\n"
        "‚Äî –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω\n‚Äî SEO-–æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è\n‚Äî –ë—ã—Å—Ç—Ä–∞—è –∑–∞–≥—Ä—É–∑–∫–∞\n\n"
        "üéØ <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞</b>\n"
        "–†–µ–∫–ª–∞–º–∞ –≤ Google –∏ –Ø–Ω–¥–µ–∫—Å\n"
        "‚Äî Google Ads\n‚Äî –Ø–Ω–¥–µ–∫—Å.–î–∏—Ä–µ–∫—Ç\n‚Äî –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ ROI\n\n"
        "üé® <b>–ë—Ä–µ–Ω–¥–∏–Ω–≥</b>\n"
        "–£–Ω–∏–∫–∞–ª—å–Ω—ã–π —Ñ–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å\n"
        "‚Äî –õ–æ–≥–æ—Ç–∏–ø\n‚Äî –§–∏—Ä–º–µ–Ω–Ω—ã–π —Å—Ç–∏–ª—å\n\n"
        "üì¢ <b>Digital-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥</b>\n"
        "–ö–æ–º–ø–ª–µ–∫—Å–Ω–æ–µ –ø—Ä–æ–¥–≤–∏–∂–µ–Ω–∏–µ\n"
        "‚Äî SMM\n‚Äî Email-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥\n‚Äî –ö–æ–Ω—Ç–µ–Ω—Ç-—Å—Ç—Ä–∞—Ç–µ–≥–∏—è"
    )
    keyboard = [[InlineKeyboardButton("‚úçÔ∏è –ü–æ–¥–∞—Ç—å –∑–∞—è–≤–∫—É", callback_data="apply")]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    if update.message:
        await update.message.reply_html(services_text, reply_markup=reply_markup)
    elif update.callback_query:
        await update.callback_query.message.reply_html(services_text, reply_markup=reply_markup)

async def handle_promo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    code = update.message.text.strip().upper()
    if code == "WELCOME10":
        await update.message.reply_text("üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–Ω—è—Ç! –í—ã –ø–æ–ª—É—á–∏–ª–∏ —Å–∫–∏–¥–∫—É 10%.")
        context.user_data["has_discount"] = True
        await show_services(update, context)  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ª—É–≥–∏ —Å—Ä–∞–∑—É –ø–æ—Å–ª–µ –ø—Ä–æ–º–æ–∫–æ–¥–∞
    else:
        await update.message.reply_text(
            "‚ùó –¢–∞–∫–æ–π –ø—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω.\n"
            "–ò—â–∏—Ç–µ –¥–µ–π—Å—Ç–≤—É—é—â–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –Ω–∞—à–µ–º —Å–∞–π—Ç–µ: https://casadigital.ru/"
        )
        context.user_data["has_discount"] = False
    return ConversationHandler.END

async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["name"] = update.message.text
    await update.message.reply_text("–û—Å—Ç–∞–≤—å—Ç–µ –∫–æ–Ω—Ç–∞–∫—Ç: –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ email")
    return GET_CONTACT

async def get_contact(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["contact"] = update.message.text
    keyboard = [
        [KeyboardButton("–†–∞–∑—Ä–∞–±–æ—Ç–∫–∞ —Å–∞–π—Ç–∞"), KeyboardButton("–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–∞—è —Ä–µ–∫–ª–∞–º–∞")],
        [KeyboardButton("–ë—Ä–µ–Ω–¥–∏–Ω–≥"), KeyboardButton("Digital-–º–∞—Ä–∫–µ—Ç–∏–Ω–≥")],
        [KeyboardButton("–î—Ä—É–≥–æ–µ")]
    ]
    reply_markup = ReplyKeyboardMarkup(keyboard, one_time_keyboard=True, resize_keyboard=True)
    await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å–ª—É–≥—É:", reply_markup=reply_markup)
    return SELECT_SERVICE

async def get_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    if text == "–î—Ä—É–≥–æ–µ":
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ, –∫–∞–∫—É—é —É—Å–ª—É–≥—É –≤—ã —Ö–æ—Ç–∏—Ç–µ –∑–∞–∫–∞–∑–∞—Ç—å:", reply_markup=ReplyKeyboardRemove())
        return CUSTOM_SERVICE
    else:
        context.user_data["service"] = text
        return await finish_application(update, context)

async def get_custom_service(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["service"] = update.message.text
    return await finish_application(update, context)

async def finish_application(update: Update, context: ContextTypes.DEFAULT_TYPE):
    name = context.user_data.get("name")
    contact = context.user_data.get("contact")
    service = context.user_data.get("service")
    user = update.message.from_user
    has_discount = context.user_data.get("has_discount", False)

    text = (
        f"üìù –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –∏–∑ Telegram:\n\n"
        f"üë§ –ò–º—è: {name}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {contact}\n"
        f"üì¶ –£—Å–ª—É–≥–∞: {service}\n\n"
        f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: @{user.username or '–ë–µ–∑ username'} (ID: {user.id})\n"
        f"–°–∫–∏–¥–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞: {'–î–∞' if has_discount else '–ù–µ—Ç'}"
    )

    await context.bot.send_message(chat_id=MANAGER_CHAT_ID, text=text)
    await update.message.reply_text("‚úÖ –°–ø–∞—Å–∏–±–æ! –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=ReplyKeyboardRemove())
    return ConversationHandler.END

def run_flask():
    flask_app.run(port=8000)

def main():
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CallbackQueryHandler(button_handler)],
        states={
            PROMO: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_promo)],
            GET_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_name)],
            GET_CONTACT: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_contact)],
            SELECT_SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_service)],
            CUSTOM_SERVICE: [MessageHandler(filters.TEXT & ~filters.COMMAND, get_custom_service)],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv_handler)

    threading.Thread(target=run_flask).start()

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
    app.run_polling()

if __name__ == "__main__":
    main()
